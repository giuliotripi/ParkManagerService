/* Generated by AN DISI Unibo */ 
package it.unibo.parkingservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var SLOTNUM: Int = 0
				var TOKENID: String = ""
				var Error: Boolean = false
				var Trolley = org.eclipse.californium.core.CoapClient("coap://localhost:8050/ctxservice/trolley")
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Service init")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						updateResourceRep( "idle"  
						)
					}
					 transition(edgeName="t00",targetState="handleEnterRequest1",cond=whenRequest("enterRequest"))
					transition(edgeName="t01",targetState="handleCarEnter1",cond=whenRequest("carEnter"))
					transition(edgeName="t02",targetState="handlePickUp1",cond=whenRequest("pickUpRequest"))
				}	 
				state("handleEnterRequest1") { //this:State
					action { //it:State
						updateResourceRep( "handleEnterRequest1"  
						)
						println("handleEnterRequest1")
						request("getValue", "getValue(_)" ,"weight" )  
					}
					 transition(edgeName="t1a3",targetState="handleEnterRequest2",cond=whenReply("sensorValue"))
				}	 
				state("handleEnterRequest2") { //this:State
					action { //it:State
						println("handleEnterRequest2")
						if( checkMsgContent( Term.createTerm("sensorValue(VALUE,SENSORNAME)"), Term.createTerm("sensorValue(WEIGHT,weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												SLOTNUM = 0
								
												val trolleyState = Trolley.get().getResponseText()
												if(!trolleyState.equals("stopped")) {
													if (payloadArg(0).toInt() < eu.musarellatripi.sensors.Values.weightThreshold) { //car must be absent
														val parkingState: eu.musarellatripi.domain.ParkingState = eu.musarellatripi.domain.ParkingState()
														val slots = parkingState.getAll()
													 	for(i in 1..6) {
															if(slots.get(i)?.reserved == false) {
																SLOTNUM=i;
																break;
															}
														}
														if(SLOTNUM>0)
															parkingState.update(SLOTNUM, true, "")
								answer("enterRequest", "slotNum", "slotNum($SLOTNUM)"   )  
								println("[SERVICE] slotNum assigned: $SLOTNUM")
								
													} else {
								answer("enterRequest", "error", "error(weighttoohigh)"   )  
								
													}
												} else {
								answer("enterRequest", "error", "error(trolleystopped)"   )  
								
												}
						}
						updateResourceRep( "handleEnterRequest2"  
						)
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleCarEnter1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("carEnter(SLOTNUM)"), Term.createTerm("carEnter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0).toInt()  
								request("getValue", "getValue(_)" ,"weight" )  
						}
					}
					 transition(edgeName="t2a4",targetState="handleCarEnter2",cond=whenReply("sensorValue"))
				}	 
				state("handleCarEnter2") { //this:State
					action { //it:State
						println("In handleCarEnter")
						if( checkMsgContent( Term.createTerm("sensorValue(VALUE,SENSORNAME)"), Term.createTerm("sensorValue(WEIGHT,weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											val weight = payloadArg(0).toInt()
											
											val trolleyState = Trolley.get().getResponseText()
											
											val parkingState: eu.musarellatripi.domain.ParkingState = eu.musarellatripi.domain.ParkingState()
											if(SLOTNUM >= 1 && SLOTNUM <= 6 && parkingState.get(SLOTNUM).reserved == true &&
												parkingState.get(SLOTNUM).token.equals("")) {
								
												if(weight > eu.musarellatripi.sensors.Values.weightThreshold) { //car must be there
													if(!trolleyState.equals("stopped")) {
														val STRING_LENGTH = 10
														val charPool : List<Char> = ('a'..'z') + ('A'..'Z') + ('0'..'9')
														val randomString = (1..STRING_LENGTH)
														  .map { i -> kotlin.random.Random.nextInt(0, charPool.size) }
														  .map(charPool::get)
														  .joinToString("");
														TOKENID = "t" + SLOTNUM + randomString
														
														
														if(parkingState.get(SLOTNUM).token.equals("")) {
															parkingState.update(SLOTNUM, true, TOKENID)
														}
														Error = false
								println("[SERVICE] Generated TOKENID: $TOKENID")
								updateResourceRep( "handleCarEnter"  
								)
								answer("carEnter", "token", "token($TOKENID)"   )  
								
													} else { //trolley is stopped
														Error = true
								answer("carEnter", "error", "error(trolleystopped)"   )  
								
													}
												} else { //car is not there
													Error = true
								answer("carEnter", "error", "error(indoorempty)"   )  
									
												}
											} else {
												Error = true
								answer("carEnter", "error", "error(valuesnotvalid)"   )  
								
											}
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({ Error  
					}) )
					transition( edgeName="goto",targetState="handleCarEnter3", cond=doswitchGuarded({! ( Error  
					) }) )
				}	 
				state("handleCarEnter3") { //this:State
					action { //it:State
						request("moveToIn", "moveToIn(X)" ,"trolley" )  
					}
					 transition(edgeName="t2b5",targetState="handleCarEnter4",cond=whenReply("moveDone"))
				}	 
				state("handleCarEnter4") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveDone(MOVE,RESULT)"), Term.createTerm("moveDone(MOVE,STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								request("moveToSlotIn", "moveToSlotIn($SLOTNUM)" ,"trolley" )  
						}
					}
					 transition(edgeName="t2c6",targetState="handleCarEnter5",cond=whenReply("moveDone"))
				}	 
				state("handleCarEnter5") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveDone(MOVE,RESULT)"), Term.createTerm("moveDone(MOVE,STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						stateTimer = TimerActor("timer_handleCarEnter5", 
							scope, context!!, "local_tout_parkingservice_handleCarEnter5", 200.toLong() )
					}
					 transition(edgeName="t2d7",targetState="handleCarEnter6",cond=whenTimeout("local_tout_parkingservice_handleCarEnter5"))   
					transition(edgeName="t2d8",targetState="handleCarEnter1",cond=whenRequest("carEnter"))
					transition(edgeName="t2d9",targetState="handlePickUp1",cond=whenRequest("pickUpRequest"))
				}	 
				state("handleCarEnter6") { //this:State
					action { //it:State
						request("backHome", "backHome(X)" ,"trolley" )  
					}
					 transition(edgeName="t2e10",targetState="handleCarEnter7",cond=whenReply("moveDone"))
				}	 
				state("handleCarEnter7") { //this:State
					action { //it:State
						println("[SERVICE] carEnterRequest finished")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handlePickUp1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickUpRequest(TOKENID)"), Term.createTerm("pickUpRequest(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								request("getValue", "getValue(_)" ,"sonar" )  
								
												TOKENID = payloadArg(0)
						}
					}
					 transition(edgeName="t3a11",targetState="handlePickUp2",cond=whenReply("sensorValue"))
				}	 
				state("handlePickUp2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sensorValue(VALUE,SENSORNAME)"), Term.createTerm("sensorValue(DISTANCE,distance)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val sonarState = payloadArg(0).toInt()
												
												val trolleyState = Trolley.get().getResponseText()
												
												SLOTNUM = -1
												if(!trolleyState.equals("stopped")) {
													if(sonarState > eu.musarellatripi.sensors.Values.sonarThreshold) { //if less there is already a car, so if more we can proceed
														
														val parkingState: eu.musarellatripi.domain.ParkingState = eu.musarellatripi.domain.ParkingState()
														//val slotsCompatible = parkingState.getAll().filter {(key, value) -> value.token.equals(TOKENID)}
														for(i in 1..6) {
															if(parkingState.get(i).token.equals(TOKENID)) {
																SLOTNUM = i;
																println("$TOKENID corresponds to slot $SLOTNUM")
																parkingState.update(i, false, "")
																break;
															}
														}
														if(SLOTNUM == -1) {
															println("WRONGTOKEN")
								answer("pickUpRequest", "error", "error(wrongtoken)"   )  
								
														}
													} else {
														println("OUTDOORBUSY")
								answer("pickUpRequest", "error", "error(outdoorbusy)"   )  
								
													}
												} else {
								answer("pickUpRequest", "error", "error(trolleystopped)"   )  
								
												}
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({ SLOTNUM == -1  
					}) )
					transition( edgeName="goto",targetState="handlePickUp3", cond=doswitchGuarded({! ( SLOTNUM == -1  
					) }) )
				}	 
				state("handlePickUp3") { //this:State
					action { //it:State
						request("moveToSlotOut", "moveToSlotOut($SLOTNUM)" ,"trolley" )  
					}
					 transition(edgeName="t3b12",targetState="handlePickUp4",cond=whenReply("moveDone"))
				}	 
				state("handlePickUp4") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveDone(MOVE,RESULT)"), Term.createTerm("moveDone(MOVE,RESULT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								request("moveToOut", "moveToOut(X)" ,"trolley" )  
						}
					}
					 transition(edgeName="t3c13",targetState="handlePickUp5",cond=whenReply("moveDone"))
				}	 
				state("handlePickUp5") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveDone(MOVE,RESULT)"), Term.createTerm("moveDone(MOVE,RESULT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("pickUpRequest", "pickUpReply", "pickUpReply(ok)"   )  
								forward("startTimer", "startTimer(X)" ,"dtfree" ) 
						}
						stateTimer = TimerActor("timer_handlePickUp5", 
							scope, context!!, "local_tout_parkingservice_handlePickUp5", 200.toLong() )
					}
					 transition(edgeName="t3d14",targetState="handlePickUp6",cond=whenTimeout("local_tout_parkingservice_handlePickUp5"))   
					transition(edgeName="t3d15",targetState="handleCarEnter1",cond=whenRequest("carEnter"))
					transition(edgeName="t3d16",targetState="handlePickUp1",cond=whenRequest("pickUpRequest"))
				}	 
				state("handlePickUp6") { //this:State
					action { //it:State
						request("backHome", "backHome(X)" ,"trolley" )  
					}
					 transition(edgeName="t3e17",targetState="handlePickUp7",cond=whenReply("moveDone"))
				}	 
				state("handlePickUp7") { //this:State
					action { //it:State
						println("[SERVICE] pickUpRequest finished")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
