/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var State = "idle"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						updateResourceRep( "idle"  
						)
						
									State = "idle"
					}
					 transition(edgeName="t026",targetState="handleSetTrolleyStatus",cond=whenDispatch("setTrolleyStatus"))
					transition(edgeName="t027",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t028",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t029",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t030",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t031",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("moveToIn") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToIn1")
						answer("moveToIn", "moveDone", "moveDone(moveToIn,1)"   )  
					}
					 transition(edgeName="t132",targetState="handleSetTrolleyStatus",cond=whenDispatch("setTrolleyStatus"))
					transition(edgeName="t133",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t134",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t135",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t136",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t137",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("moveToSlotIn") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToSlotIn2")
						answer("moveToSlotIn", "moveDone", "moveDone(moveToSlotIn,1)"   )  
					}
					 transition(edgeName="t238",targetState="handleSetTrolleyStatus",cond=whenDispatch("setTrolleyStatus"))
					transition(edgeName="t239",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t240",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t241",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t242",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t243",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("backHome") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] backHome3-6")
						answer("backHome", "moveDone", "moveDone(backHome,1)"   )  
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("moveToSlotOut") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToSlotOut4")
						answer("moveToSlotOut", "moveDone", "moveDone(moveToSlotOut,1)"   )  
					}
					 transition(edgeName="t344",targetState="handleSetTrolleyStatus",cond=whenDispatch("setTrolleyStatus"))
					transition(edgeName="t345",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t346",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t347",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t348",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t349",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("moveToOut") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToOut5")
						answer("moveToOut", "moveDone", "moveDone(moveToOut,1)"   )  
					}
					 transition(edgeName="t450",targetState="handleSetTrolleyStatus",cond=whenDispatch("setTrolleyStatus"))
					transition(edgeName="t451",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t452",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t453",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t454",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t455",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						updateResourceRep( "stopped"  
						)
						discardMessages = true
					}
					 transition(edgeName="t556",targetState="handleSetTrolleyStatus",cond=whenDispatch("setTrolleyStatus"))
				}	 
				state("handleSetTrolleyStatus") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("trolleyStatus(STATUS)"), Term.createTerm("trolleyStatus(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val newStatus = payloadArg(0)
												if(newStatus.equals("stopped"))
													State = "stopped"
												else
													State = "idle"
						}
					}
					 transition( edgeName="goto",targetState="stopped", cond=doswitchGuarded({ State.equals("stopped")  
					}) )
					transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({! ( State.equals("stopped")  
					) }) )
				}	 
			}
		}
}
