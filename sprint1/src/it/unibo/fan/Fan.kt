/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var Stato = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Fan init")
					}
					 transition( edgeName="goto",targetState="off", cond=doswitch() )
				}	 
				state("off") { //this:State
					action { //it:State
						println("Fan off")
						updateResourceRep( "fanOff"  
						)
						 Stato = 0  
						discardMessages = true
					}
					 transition(edgeName="t166",targetState="on",cond=whenDispatch("setFanOn"))
					transition(edgeName="t167",targetState="handleGetFanState",cond=whenRequest("getFanState"))
				}	 
				state("on") { //this:State
					action { //it:State
						println("Fan on")
						updateResourceRep( "fanOn"  
						)
						 Stato = 1  
						discardMessages = true
					}
					 transition(edgeName="t268",targetState="off",cond=whenDispatch("setFanOff"))
					transition(edgeName="t269",targetState="handleGetFanState",cond=whenRequest("getFanState"))
				}	 
				state("handleGetFanState") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("getFanState(X)"), Term.createTerm("getFanState(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Fan getStatus")
								answer("getFanState", "fanState", "fanState($Stato)"   )  
						}
					}
					 transition( edgeName="goto",targetState="off", cond=doswitchGuarded({ Stato == 0  
					}) )
					transition( edgeName="goto",targetState="on", cond=doswitchGuarded({! ( Stato == 0  
					) }) )
				}	 
			}
		}
}
