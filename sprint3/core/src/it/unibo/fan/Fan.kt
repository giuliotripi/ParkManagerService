/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var Stato = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Fan init")
					}
					 transition( edgeName="goto",targetState="off", cond=doswitch() )
				}	 
				state("off") { //this:State
					action { //it:State
						println("Fan off")
						updateResourceRep( "off"  
						)
						 Stato = 0  
						discardMessages = true
					}
					 transition(edgeName="t155",targetState="on",cond=whenDispatch("startFan"))
				}	 
				state("on") { //this:State
					action { //it:State
						println("Fan on")
						updateResourceRep( "on"  
						)
						 Stato = 1  
						discardMessages = true
					}
					 transition(edgeName="t256",targetState="off",cond=whenDispatch("stopFan"))
				}	 
			}
		}
}
