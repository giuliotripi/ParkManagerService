/* Generated by AN DISI Unibo */ 
package it.unibo.dtfree

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Dtfree ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "idle"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val TIME=eu.musarellatripi.sensors.Values.DTFREE;
		return { //this:ActionBasciFsm
				state("idle") { //this:State
					action { //it:State
					}
					 transition(edgeName="t047",targetState="timing",cond=whenDispatch("startTimer"))
				}	 
				state("timing") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_timing", 
							scope, context!!, "local_tout_dtfree_timing", TIME )
					}
					 transition(edgeName="t148",targetState="timeout",cond=whenTimeout("local_tout_dtfree_timing"))   
					transition(edgeName="t149",targetState="idle",cond=whenDispatch("stopTimer"))
					transition(edgeName="t150",targetState="idle",cond=whenEvent("carLeftOutdoor"))
				}	 
				state("timeout") { //this:State
					action { //it:State
						emit("timeout", "timeout(_)" ) 
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
