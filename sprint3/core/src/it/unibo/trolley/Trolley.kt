/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val HOME : Pair<String,String> = Pair("0", "0")
				val INDOOR : Pair<String,String> = Pair("6", "0")
				val OUTDOOR : Pair<String,String> = Pair("6", "4")
				val SLOTS : HashMap<Int, Pair<String,String>> = hashMapOf(
					1 to Pair("1", "1"), 2 to Pair("4", "1"), 3 to Pair("1", "2"),
					4 to Pair("4", "2"), 5 to Pair("1", "3"), 6 to Pair("4", "3"))
					//I must not specify the coordinates of the parking slot but the front of the parking slot
				var Moving = false
				var trolleyCommand = ""
				var MV = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.loadRoomMap( "parkingMap"  )
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.startTimer(  )
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						updateResourceRep( "idle"  
						)
						println("[TROLLEY] idle")
					}
					 transition(edgeName="t036",targetState="stopped",cond=whenDispatch("stopTrolley"))
					transition(edgeName="t037",targetState="idle",cond=whenDispatch("resumeTrolley"))
					transition(edgeName="t038",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t039",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t040",targetState="moveToHome",cond=whenRequest("moveToHome"))
					transition(edgeName="t041",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t042",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("moveToIn") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						println("[TROLLEY] moveToIn1")
						
									itunibo.planner.plannerUtil.planForGoal(INDOOR.first, INDOOR.second)
									trolleyCommand = "moveToIn"
					}
					 transition( edgeName="goto",targetState="moving", cond=doswitch() )
				}	 
				state("moveToSlotIn") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						println("[TROLLEY] moveToSlotIn2")
						if( checkMsgContent( Term.createTerm("moveToSlotIn(SLOTNUM)"), Term.createTerm("moveToSlotIn(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val SLOTNUM = payloadArg(0).toInt()
												itunibo.planner.plannerUtil.planForGoal(SLOTS.get(SLOTNUM)!!.first, SLOTS.get(SLOTNUM)!!.second)
												trolleyCommand = "moveToSlotIn"
						}
					}
					 transition( edgeName="goto",targetState="moving", cond=doswitch() )
				}	 
				state("moveToHome") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						println("[TROLLEY] moveToHome3-6")
						
									itunibo.planner.plannerUtil.planForGoal(HOME.first, HOME.second)
									trolleyCommand = "moveToHome"
					}
					 transition( edgeName="goto",targetState="moving", cond=doswitch() )
				}	 
				state("moveToSlotOut") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						println("[TROLLEY] moveToSlotOut4")
						if( checkMsgContent( Term.createTerm("moveToSlotOut(SLOTNUM)"), Term.createTerm("moveToSlotOut(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val SLOTNUM = payloadArg(0).toInt()
												itunibo.planner.plannerUtil.planForGoal(SLOTS.get(SLOTNUM)!!.first, SLOTS.get(SLOTNUM)!!.second)
												trolleyCommand = "moveToSlotOut"
						}
					}
					 transition( edgeName="goto",targetState="moving", cond=doswitch() )
				}	 
				state("moveToOut") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						println("[TROLLEY] moveToOut5")
						
									itunibo.planner.plannerUtil.planForGoal(OUTDOOR.first, OUTDOOR.second)
									trolleyCommand = "moveToOut"
					}
					 transition( edgeName="goto",targetState="moving", cond=doswitch() )
				}	 
				state("moving") { //this:State
					action { //it:State
						
									MV = itunibo.planner.plannerUtil.getNextPlannedMove()
									// if it has executed all moves, goes back to idle
									if(MV.equals("")){
										itunibo.planner.plannerUtil.showMap()
										println("[TROLLEY] $trolleyCommand terminated")
										if(trolleyCommand != "moveToHome")
											delay(1000) //simulation of load/unload time
										answer(trolleyCommand, "moveDone", "moveDone($trolleyCommand,1)")
										trolleyCommand = ""
										Moving = false
									}
									else{
										Moving = true
									}
					}
					 transition( edgeName="goto",targetState="executeMove", cond=doswitchGuarded({ Moving  
					}) )
					transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({! ( Moving  
					) }) )
				}	 
				state("executeMove") { //this:State
					action { //it:State
						
									if(MV == "w") {
						request("step", "step(330)" ,"basicrobot" )  
						delay(500) 
						
									} else {
						forward("cmd", "cmd($MV)" ,"basicrobot" ) 
						delay(500) 
						
									}
									itunibo.planner.plannerUtil.updateMap(MV)
					}
					 transition( edgeName="goto",targetState="waitStepResponse", cond=doswitchGuarded({ MV == "w"  
					}) )
					transition( edgeName="goto",targetState="moving", cond=doswitchGuarded({! ( MV == "w"  
					) }) )
				}	 
				state("waitStepResponse") { //this:State
					action { //it:State
					}
					 transition(edgeName="t543",targetState="moving",cond=whenReply("stepdone"))
					transition(edgeName="t544",targetState="handleFailure",cond=whenReply("stepfail"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						updateResourceRep( "stopped"  
						)
						println("[TROLLEY] stopped")
						discardMessages = true
					}
					 transition(edgeName="t645",targetState="stopped",cond=whenDispatch("stopTrolley"))
					transition(edgeName="t646",targetState="idle",cond=whenDispatch("resumeTrolley"))
				}	 
				state("handleFailure") { //this:State
					action { //it:State
						println("[TROLLEY] FAILED MOVE")
						
								itunibo.planner.plannerUtil.planForGoal(HOME.first, HOME.second)
								MV = itunibo.planner.plannerUtil.getNextPlannedMove()
								while(!MV.equals("")) {
									itunibo.planner.plannerUtil.updateMap(MV)
									MV = itunibo.planner.plannerUtil.getNextPlannedMove()
								}
								while(!itunibo.planner.plannerUtil.getDirection().equals("downDir"))
									itunibo.planner.plannerUtil.updateMap("l")
								itunibo.planner.plannerUtil.showMap()
						forward("trolleyError", "trolleyError(_)" ,"managerservice" ) 
						updateResourceRep( "stopped"  
						)
						
									answer(trolleyCommand, "moveError", "moveError($trolleyCommand,1)")
					}
					 transition( edgeName="goto",targetState="stopped", cond=doswitch() )
				}	 
			}
		}
}
