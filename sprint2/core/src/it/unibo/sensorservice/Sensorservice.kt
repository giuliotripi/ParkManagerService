/* Generated by AN DISI Unibo */ 
package it.unibo.sensorservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sensorservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition(edgeName="t118",targetState="tempLow",cond=whenEvent("underTMAX"))
					transition(edgeName="t119",targetState="tempHigh",cond=whenEvent("aboveTMAX"))
				}	 
				state("tempLow") { //this:State
					action { //it:State
						forward("stopFan", "stopFan(X)" ,"fan" ) 
					}
					 transition(edgeName="t220",targetState="tempHigh",cond=whenEvent("aboveTMAX"))
				}	 
				state("tempHigh") { //this:State
					action { //it:State
						forward("startFan", "startFan(X)" ,"fan" ) 
					}
					 transition(edgeName="t321",targetState="tempLow",cond=whenEvent("underTMAX"))
				}	 
			}
		}
}
