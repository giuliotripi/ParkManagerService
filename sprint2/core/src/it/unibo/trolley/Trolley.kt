/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var State = "idle"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						updateResourceRep( "idle"  
						)
						
									State = "idle"
					}
					 transition(edgeName="t032",targetState="stopped",cond=whenDispatch("stopTrolley"))
					transition(edgeName="t033",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t034",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t035",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t036",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t037",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("moveToIn") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToIn1")
						answer("moveToIn", "moveDone", "moveDone(moveToIn,1)"   )  
					}
					 transition(edgeName="t138",targetState="stopped",cond=whenDispatch("stopTrolley"))
					transition(edgeName="t139",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t140",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t141",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t142",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t143",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("moveToSlotIn") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToSlotIn2")
						answer("moveToSlotIn", "moveDone", "moveDone(moveToSlotIn,1)"   )  
					}
					 transition(edgeName="t244",targetState="stopped",cond=whenDispatch("stopTrolley"))
					transition(edgeName="t245",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t246",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t247",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t248",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t249",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("backHome") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] backHome3-6")
						answer("backHome", "moveDone", "moveDone(backHome,1)"   )  
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("moveToSlotOut") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToSlotOut4")
						answer("moveToSlotOut", "moveDone", "moveDone(moveToSlotOut,1)"   )  
					}
					 transition(edgeName="t350",targetState="stopped",cond=whenDispatch("stopTrolley"))
					transition(edgeName="t351",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t352",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t353",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t354",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t355",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("moveToOut") { //this:State
					action { //it:State
						updateResourceRep( "working"  
						)
						delay(2000) 
						println("[TROLLEY] moveToOut5")
						answer("moveToOut", "moveDone", "moveDone(moveToOut,1)"   )  
					}
					 transition(edgeName="t456",targetState="stopped",cond=whenDispatch("stopTrolley"))
					transition(edgeName="t457",targetState="moveToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t458",targetState="moveToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t459",targetState="backHome",cond=whenRequest("backHome"))
					transition(edgeName="t460",targetState="moveToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t461",targetState="moveToOut",cond=whenRequest("moveToOut"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						updateResourceRep( "stopped"  
						)
						println("[TROLLEY] stopped")
						discardMessages = true
					}
					 transition(edgeName="t562",targetState="idle",cond=whenDispatch("resumeTrolley"))
				}	 
			}
		}
}
