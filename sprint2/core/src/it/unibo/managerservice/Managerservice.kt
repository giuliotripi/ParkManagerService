/* Generated by AN DISI Unibo */ 
package it.unibo.managerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Managerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val Gson = com.google.gson.Gson();
				val Trolley = org.eclipse.californium.core.CoapClient("coap://localhost:8050/ctxservice/trolley");
				val Fan = org.eclipse.californium.core.CoapClient("coap://localhost:8050/ctxservice/fan")
				val ParkingDevicesStatus = eu.musarellatripi.ParkingDevicesStatus();
				ParkingDevicesStatus.sensors.put("temperature", eu.musarellatripi.SensorMeasure(0.0F, 0, "temperature"))
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						updateResourceRep( Gson.toJson(ParkingDevicesStatus)  
						)
					}
					 transition(edgeName="t122",targetState="updateSensorReading",cond=whenReply("sensorValue"))
					transition(edgeName="t123",targetState="handleStopTrolley1",cond=whenRequest("stopTrolley"))
					transition(edgeName="t124",targetState="handleResumeTrolley",cond=whenRequest("resumeTrolley"))
					transition(edgeName="t125",targetState="dtFreeTimeout",cond=whenEvent("timeout"))
					transition(edgeName="t126",targetState="resetAlarmOutdoor",cond=whenEvent("carLeftOutdoor"))
					transition(edgeName="t127",targetState="update",cond=whenRequest("readStatus"))
				}	 
				state("handleStopTrolley1") { //this:State
					action { //it:State
						request("getValue", "getValue(_)" ,"thermometer" )  
					}
					 transition(edgeName="t128",targetState="handleStopTrolley2",cond=whenReply("sensorValue"))
				}	 
				state("handleStopTrolley2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sensorValue(VALUE,SENSORNAME)"), Term.createTerm("sensorValue(TEMPERATURE,temperature)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val temperature = payloadArg(0).toInt()
												if(temperature >= eu.musarellatripi.sensors.Values.TMAX) {
								forward("stopTrolley", "stopTrolley(_)" ,"trolley" ) 
								answer("stopTrolley", "ok", "ok(_)"   )  
								
												} else {
													println("[TROLLEY] temperature not above TMAX, won't stop")
								answer("stopTrolley", "error", "error(temperatureundertmax)"   )  
								
												}
						}
					}
					 transition( edgeName="goto",targetState="update", cond=doswitch() )
				}	 
				state("handleResumeTrolley") { //this:State
					action { //it:State
						forward("resumeTrolley", "resumeTrolley(_)" ,"trolley" ) 
						answer("resumeTrolley", "ok", "ok(_)"   )  
					}
					 transition( edgeName="goto",targetState="update", cond=doswitch() )
				}	 
				state("updateSensorReading") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sensorValue(VALUE,SENSORNAME)"), Term.createTerm("sensorValue(VALUE,SENSORNAME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val value = payloadArg(0).toFloat()
												val sensor = payloadArg(1)
												
												ParkingDevicesStatus.sensors.get(sensor)?.measure = value
												ParkingDevicesStatus.sensors.get(sensor)?.time = (System.currentTimeMillis()/1000).toInt()
												val STATUS = Gson.toJson(ParkingDevicesStatus)
												
								answer("readStatus", "parkStatus", "parkStatus($STATUS)"   )  
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("update") { //this:State
					action { //it:State
						request("getValue", "getValue(_)" ,"thermometer" )  
						
									val trolleyState = Trolley.get().getResponseText().toUpperCase()
									val fanState = Fan.get().getResponseText().toUpperCase()
									
									try {
										ParkingDevicesStatus.trolleyState = eu.musarellatripi.TrolleyState.valueOf(trolleyState)
										ParkingDevicesStatus.fanState = eu.musarellatripi.FanState.valueOf(fanState)
									} catch(e: IllegalArgumentException) {
										println("Actors still without value: ")
										println("trolleyState: " + trolleyState)
										println("fanState: " + fanState)
									}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("dtFreeTimeout") { //this:State
					action { //it:State
						
									ParkingDevicesStatus.outdoorAlarm = true
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("resetAlarmOutdoor") { //this:State
					action { //it:State
						
									ParkingDevicesStatus.outdoorAlarm = false
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
