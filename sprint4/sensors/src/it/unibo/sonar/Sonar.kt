/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var DISTANCE = 0.0; var OLDDISTANCE = 0.0; var simulate: Boolean = false;  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('config.pl')","") //set resVar	
						solve("simulate(X)","") //set resVar	
						println(currentSolution)
						 val x = getCurSol("X").toString() 
								   simulate = ( x == "on")
						println("Sonar init simulate=$simulate")
					}
					 transition( edgeName="goto",targetState="check", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_idle", 
							scope, context!!, "local_tout_sonar_idle", 1000.toLong() )
					}
					 transition(edgeName="t03",targetState="check",cond=whenTimeout("local_tout_sonar_idle"))   
					transition(edgeName="t04",targetState="handleRequest",cond=whenRequest("getValue"))
					transition(edgeName="t05",targetState="handleSetValue",cond=whenDispatch("setValue"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						
								   if(!simulate) {
										val p  = Runtime.getRuntime().exec("python3 sonar.py")
										val reader = java.io.BufferedReader(java.io.InputStreamReader(p.getInputStream()))
										DISTANCE = reader.readLine().toDouble()
									}
						answer("getValue", "sensorValue", "sensorValue($DISTANCE,distance)"   )  
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleSetValue") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sensorValue(VALUE,SENSORNAME)"), Term.createTerm("sensorValue(DISTANCE,distance)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												if(simulate) {
													DISTANCE = payloadArg(0).toDouble()
													//if equal to threshold is under
													if(DISTANCE > eu.musarellatripi.sensors.Values.sonarThreshold &&
														OLDDISTANCE <= eu.musarellatripi.sensors.Values.sonarThreshold
													) {
								emit("carLeftOutdoor", "carLeftOutdoor(_)" ) 
								
													} else if(DISTANCE <= eu.musarellatripi.sensors.Values.sonarThreshold &&
														OLDDISTANCE > eu.musarellatripi.sensors.Values.sonarThreshold
													) {
								emit("carArrivedIndoor", "carArrivedIndoor(_)" ) 
								
													}
													OLDDISTANCE = DISTANCE
												}
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("check") { //this:State
					action { //it:State
						
									if(!simulate) {
										val p  = Runtime.getRuntime().exec("python3 sonar.py")
										val reader = java.io.BufferedReader(java.io.InputStreamReader(p.getInputStream()))
										DISTANCE = reader.readLine().toDouble()
										if(DISTANCE > eu.musarellatripi.sensors.Values.sonarThreshold &&
												OLDDISTANCE <= eu.musarellatripi.sensors.Values.sonarThreshold
										) {
						emit("carLeftOutdoor", "carLeftOutdoor(_)" ) 
						
										} else if(DISTANCE <= eu.musarellatripi.sensors.Values.sonarThreshold &&
											OLDDISTANCE > eu.musarellatripi.sensors.Values.sonarThreshold
										) {
						emit("carArrivedIndoor", "carArrivedIndoor(_)" ) 
						
										}
										OLDDISTANCE = DISTANCE
									}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
