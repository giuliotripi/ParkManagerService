/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var Stato = 0; var simulate: Boolean = false;  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('config.pl')","") //set resVar	
						solve("simulate(X)","") //set resVar	
						println(currentSolution)
						 val x = getCurSol("X").toString() 
								   simulate = ( x == "on")
						println("Fan init simulate=$simulate")
					}
					 transition( edgeName="goto",targetState="off", cond=doswitch() )
				}	 
				state("off") { //this:State
					action { //it:State
						println("Fan off")
						
									if(!simulate) {
										val p  = Runtime.getRuntime().exec("python3 fan.py off")
									}
						updateResourceRep( "off"  
						)
						 Stato = 0  
						discardMessages = true
					}
					 transition(edgeName="t16",targetState="on",cond=whenDispatch("startFan"))
				}	 
				state("on") { //this:State
					action { //it:State
						println("Fan on")
						
									if(!simulate) {
										val p  = Runtime.getRuntime().exec("python3 fan.py on")
									}	
						updateResourceRep( "on"  
						)
						 Stato = 1  
						discardMessages = true
					}
					 transition(edgeName="t27",targetState="off",cond=whenDispatch("stopFan"))
				}	 
			}
		}
}
